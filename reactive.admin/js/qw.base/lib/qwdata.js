// A '.tsx' file enables JSX support in the TypeScript compiler, 
// for more information see the following page on the TypeScript wiki:
// https://github.com/Microsoft/TypeScript/wiki/JSX
define(["require", "exports"], function (require, exports) {
    "use strict";
    var DataSource = (function () {
        function DataSource(model) {
            this.model = model;
        }
        Object.defineProperty(DataSource.prototype, "dm", {
            get: function () {
                if (!this._dm) {
                    this._dm = new breeze.EntityManager({
                        dataService: new breeze.DataService({
                            serviceName: '{0}'.format(utils.srv_url),
                        }),
                        validationOptions: new breeze.ValidationOptions({
                            validateOnSave: false,
                            validateOnAttach: false,
                            validateOnQuery: true
                        })
                    });
                }
                return this._dm;
            },
            enumerable: true,
            configurable: true
        });
        DataSource.prototype.fetch_data = function (qry) {
            var _this = this;
            if (!this.dm.metadataStore.hasMetadataFor(this.model)) {
                return this.fetch_metadata().then(function (args) {
                    return _this.fetch_dataEx(qry);
                });
            }
            return this.fetch_dataEx(qry);
        };
        DataSource.prototype.fetch_dataEx = function (qry) {
            var _this = this;
            var d = Q.defer();
            Backendless.Persistence.of(this.model).find(new Backendless.Async(function (list) {
                _.each(list.data, function (obj) {
                    _this.dm.createEntity(_this.model, obj, breeze.EntityState.Unchanged, breeze.MergeStrategy.OverwriteChanges);
                });
                var entities = _this.dm.getEntities(_this.model);
                d.resolve(entities);
            }, function (err) {
                d.reject(err);
            }));
            return d.promise;
        };
        DataSource.prototype.fetch_metadata = function () {
            var _this = this;
            var d = Q.defer();
            Backendless.Persistence.describe(this.model, new Backendless.Async(function (list) {
                var props = {};
                _.each(list, function (s) {
                    props[s.name] = {
                        isprimary: s.isPrimaryKey
                    };
                });
                Store.create_entity_def({
                    entityname: _this.model,
                    master_key: '',
                    properties: props
                });
                _this.dm.metadataStore.importMetadata(Store.Store.exportMetadata());
                d.resolve(true);
            }, function (err) {
                d.reject(err);
            }));
            return d.promise;
        };
        return DataSource;
    }());
    exports.DataSource = DataSource;
    var Store;
    (function (Store_1) {
        var _entities_cache = [];
        var DT = breeze.DataType;
        var defaultNameSpace = '';
        var Identity = breeze.AutoGeneratedKeyType.Identity;
        var Validator = breeze.Validator;
        var camelCaseConvention = breeze.NamingConvention.none;
        // Breeze Labs: breeze.metadata.helper.js
        var helper = new breeze.config['MetadataHelper']();
        // Helper convenience methods
        var addDataService = helper.addDataService.bind(helper);
        var addTypeToStore = helper.addTypeToStore.bind(helper);
        var setDefaultNamespace = helper.setDefaultNamespace.bind(helper);
        var dataNameSpace = 'afrikNetMarket';
        setDefaultNamespace(dataNameSpace);
        function __addEntityType(store, type) {
            var _type = _.extend(type, {
                namespace: dataNameSpace,
                shortName: type.defaultResourceName,
                autoGeneratedKeyType: breeze.AutoGeneratedKeyType.None,
            });
            addTypeToStore(store, _type);
        }
        function __createDataStore(storeName) {
            var store = new breeze.MetadataStore({
                namingConvention: camelCaseConvention
            });
            addDataService(store, storeName);
            return store;
        }
        var dbSchema = [];
        function __regsiterSchema(srvName, store) {
            dbSchema.push({
                srvName: srvName,
                store: store
            });
        }
        Store_1.Store = new breeze.MetadataStore({ namingConvention: camelCaseConvention });
        addDataService(Store_1.Store, 'DataStore');
        setDefaultNamespace('QuickWave');
        function add_to_Store(type) {
            _entities_cache.push(type);
            var _type = _.extend(type, {
                namespace: dataNameSpace,
                shortName: type.defaultResourceName,
                autoGeneratedKeyType: breeze.AutoGeneratedKeyType.None,
            });
            addTypeToStore(Store_1.Store, _type);
        }
        Store_1.add_to_Store = add_to_Store;
        function create_entity_def(source_def, master_src_def) {
            var target_ent = {
                defaultResourceName: source_def.entityname,
                dataProperties: {},
                navigationProperties: {}
            };
            _.each(Object.keys(source_def.properties), function (k) {
                var prop_def = source_def.properties[k];
                target_ent.dataProperties[k] = {
                    dataType: prop_def.type ? prop_def.type : DT.String,
                    isPartOfKey: prop_def.isprimary ? prop_def.isprimary : false
                };
            });
            target_ent.dataProperties['created'] = { dataType: breeze.DataType.DateTime };
            target_ent.dataProperties['updated'] = { dataType: breeze.DataType.DateTime };
            var has_primary = _.find(Object.keys(target_ent.dataProperties), function (k) {
                return target_ent.dataProperties[k].isPartOfKey;
            });
            //if (!has_primary) {
            //    target_ent.dataProperties['id'] = { dataType: DT.String, isPartOfKey: true }
            //}
            if (master_src_def) {
                target_ent.navigationProperties[master_src_def.entityname] = {
                    type: master_src_def.entityname,
                    assoc: 'association_{0}_{1}'.format(master_src_def.entityname, source_def.entityname),
                    foreignKeyNames: [source_def.master_key]
                };
            }
            if (source_def.relations) {
                _.each(Object.keys(source_def.relations), function (rel) {
                    target_ent.navigationProperties[rel] = {
                        entityTypeName: rel,
                        associationName: 'association_{0}_{1}'.format(target_ent.defaultResourceName, rel),
                        isScalar: false
                    };
                    add_to_Store(target_ent);
                    var rel_ent = source_def.relations[rel];
                    create_entity_def(rel_ent);
                });
            }
            else {
                add_to_Store(target_ent);
            }
        }
        Store_1.create_entity_def = create_entity_def;
        function register_entity_defs() {
            _.each(_entities_cache, function (ent) {
                add_to_Store(ent);
            });
        }
        Store_1.register_entity_defs = register_entity_defs;
    })(Store = exports.Store || (exports.Store = {}));
});
//# sourceMappingURL=C:/afriknet/reactive.admin.bkl/reactive.admin/js/qw.base/lib/qwdata.js.map